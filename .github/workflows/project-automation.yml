name: Project Automation

on:
  create:
  repository_dispatch:
  issues:
    types: [opened]

jobs:
  setup-project:
    if: github.event_name == 'create' || github.event_name == 'repository_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Create project and default columns
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: project } = await github.rest.projects.createForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'ðŸ“‹ Project Tasks'
            });
            const columns = ['To Do', 'In Progress', 'Done'];
            for (const name of columns) {
              await github.rest.projects.createColumn({ project_id: project.id, name });
            }

  add-issue:
    if: github.event_name == 'issues' && github.event.action == 'opened'
    runs-on: ubuntu-latest
    steps:
      - name: Add issue to project
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const projectName = 'ðŸ“‹ Project Tasks';
            const { data: projects } = await github.rest.projects.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            const project = projects.find(p => p.name === projectName);
            if (!project) {
              core.setFailed(`Project ${projectName} not found`);
              return;
            }
            const { data: columns } = await github.rest.projects.listColumns({ project_id: project.id });
            const column = columns.find(c => c.name === 'To Do');
            if (!column) {
              core.setFailed('To Do column not found');
              return;
            }
            await github.rest.projects.createCard({
              column_id: column.id,
              content_id: context.payload.issue.id,
              content_type: 'Issue'
            });
